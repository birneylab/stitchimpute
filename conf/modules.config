/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: STITCH_GENERATEINPUTS {
        ext.args2 = "--generateInputOnly TRUE"
    }

    withName: STITCH_IMPUTATION {
        ext.args2 = "--regenerateInputWithDefaultValues TRUE"

        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/stitch/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: BCFTOOLS_INDEX_STITCH {
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/stitch/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: BCFTOOLS_CONCAT {
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/joint_stitch_output/vcf" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: BCFTOOLS_INDEX_JOINT {
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/joint_stitch_output/vcf" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: G2C_FULL {
        ext.args = { ( params.freq_vcf ? null : '--af-tag PAF' ) }
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/imputation_metrics" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
            pattern: "*.txt.gz"
        ]
    }

    withName: G2C_CHR {
        ext.args = { ( params.freq_vcf ? null : '--af-tag PAF' ) + " --out-r2-per-site" }
    }

    withName: EXTRACT_INFO_SCORE {
        ext.args   = "-f '%CHROM,%POS,%REF,%ALT,%INFO/INFO_SCORE\\n'"
        ext.prefix = { "${meta.id}.info_score" }
        ext.suffix = 'csv'
    }

    withName: GZIP_INFO_SCORE {
        ext.prefix = { "${files_in[1]}.gz" }
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/imputation_metrics" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }


    withName: JOIN_RSQUARE_CHR {
        ext.prefix = { "${meta.id}.r2_sites" }
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/imputation_metrics" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: REFORMAT_R2 {
        ext.prefix = { "${meta.id}.r2" }
    }

    withName: FILTER_POSITIONS {
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/filtered_positions" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: SAMTOOLS_DOWNSAMPLE {
        ext.args = {
            "--subsample ${meta.downsample_factor}" +
            (
                params.random_seed != null ?
                " --subsample-seed ${params.random_seed}" :
                ""
            )
        }
        publishDir = [
            path: { "${params.outdir}/ground_truth/downsampled_reads" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: PLOT_INFO_SCORE {
        ext.prefix = { "${meta.id}.info_score" }
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/plots" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: PLOT_R2_SITES {
        ext.prefix = { "${meta.id}.r2_sites" }
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/plots" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: PLOT_R2_SAMPLES {
        ext.prefix = { "${meta.id}.r2_samples" }
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/plots" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: PLOT_R2_MAF {
        ext.when   = {
            !params.glimpse2_concordance_ac_bins &&
            !params.glimpse2_concordance_allele_counts &&
            params.glimpse2_concordance_bins
        }
        ext.prefix = { "${meta.id}.r2_maf_bins" }
        publishDir = [
            path: { "${params.outdir}/${meta.publish_dir_subfolder}/plots" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode,
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
